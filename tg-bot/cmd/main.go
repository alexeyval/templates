package main

import (
	"fmt"
	tgbotapi "github.com/Syfaro/telegram-bot-api"
	"log"
	"reflect"
)

func main() {
	// –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞
	bot, err := tgbotapi.NewBotAPI("5941964544:AAGonU-msKpkY9N-W4E0CblToGSA9bW8SWI")
	if err != nil {
		log.Panic(err)
	}

	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç API
	var ucfg = tgbotapi.NewUpdate(0)
	ucfg.Timeout = 60
	upd, _ := bot.GetUpdatesChan(ucfg)

	// —á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
	for {
		select {
		case update := <-upd:
			if update.Message == nil {
				continue
			}

			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É
			UserName := update.Message.From.UserName
			UserNameFirstName := update.Message.From.FirstName

			// ID —á–∞—Ç–∞/–¥–∏–∞–ª–æ–≥–∞.
			// –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∫–∞–∫ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
			// (—Ç–æ–≥–¥–∞ –æ–Ω —Ä–∞–≤–µ–Ω UserID) —Ç–∞–∫ –∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
			ChatID := update.Message.Chat.ID

			// –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
			Text := update.Message.Text
			CallbackQueryHandler(update.CallbackQuery)

			log.Printf("[%s, %s] %d %s", UserName, UserNameFirstName, ChatID, Text)

			if reflect.TypeOf(update.Message.Text).Kind() == reflect.String && update.Message.Text != "" {
				switch {
				case update.CallbackQuery != nil:
					CallbackQueryHandler(update.CallbackQuery)
					fmt.Println("–Ø —Ç—É—Ç")
					continue
				case Text == "/start":

				//bot.me(chat_id = message.chat.id, message_id = to_pin)
				default:
					fmt.Println(Text)
					msgText := "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –º–µ–Ω—è üòé"
					//switch len(UserName) {
					//case 0:
					//	msgText += UserNameFirstName
					//default:
					//	msgText += UserName
					//}

					msg := tgbotapi.NewMessage(
						ChatID,
						msgText)

					v := "/–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å"
					button := []tgbotapi.InlineKeyboardButton{{
						Text: "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å üëç",
						URL:  &v,
					},
					}
					var buttons [][]tgbotapi.InlineKeyboardButton
					buttons = append(buttons, button)
					//markup := tgbotapi.InlineKeyboardMarkup{InlineKeyboard: buttons}
					//msg.ReplyMarkup = tgbotapi.NewInlineKeyboardButtonURL("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å üëç", "/–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
					//_ = []tgbotapi.InlineKeyboardButton{}
					//msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(button)

					var rows []tgbotapi.InlineKeyboardButton
					rows = append(rows, tgbotapi.NewInlineKeyboardButtonData("Next", "/–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å"))
					//rows = append(rows, tgbotapi.NewInlineKeyboardButtonURL("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", "/–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å"))
					msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows)

					message, err := bot.Send(msg)
					fmt.Println(err)

					c := tgbotapi.PinChatMessageConfig{
						ChatID:              ChatID,
						MessageID:           message.MessageID,
						DisableNotification: false,
					}
					_, _ = bot.PinChatMessage(c)
				}
			}
		}
	}
}

func CallbackQueryHandler(query *tgbotapi.CallbackQuery) {
	split := query.Data
	if split == "pager" {
		HandleNavigationCallbackQuery(query.Message.MessageID, split)
		return
	}
}

func HandleNavigationCallbackQuery(messageId int, data string) {
	pagerType := data
	_ = messageId

	fmt.Println(pagerType)
}
